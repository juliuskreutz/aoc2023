pub fn solve() {
    let input = "Game 1: 3 blue, 4 red; 1 red, 2 green, 6 blue; 2 green
Game 2: 1 blue, 2 green; 3 green, 4 blue, 1 red; 1 green, 1 blue
Game 3: 8 green, 6 blue, 20 red; 5 blue, 4 red, 13 green; 5 green, 1 red
Game 4: 1 green, 3 red, 6 blue; 3 green, 6 red; 3 green, 15 blue, 14 red
Game 5: 6 red, 1 blue, 3 green; 2 blue, 1 red, 2 green"
        .to_string();
    // let input = std::fs::read_to_string("input/day02.txt").unwrap();

    println!("Day02 Part1: {}", part1(&input));
    println!("Day02 Part2: {}", part2(&input));
}

fn part1(input: &str) -> String {
    let games = input.split('\n');

    let mut count = 0;

    for game in games {
        let mut split = input.split(':');
        split.next();

        let input = split.next().unwrap();
        let sets = input.split(';');

        for set in sets {
            let mut split = set.split(',');
            let mut colors = Vec::new();
            let mut numbers = Vec::new();

            while let Some(color) = split.next() {
                colors.push(color.trim());
                numbers.push(split.next().unwrap().trim().parse::<usize>().unwrap());
            }

            println!("{:?} {:?}", colors, numbers);
        }
    }

    count.to_string()
}

fn part2(input: &str) -> String {
    "TODO".to_string()
}
